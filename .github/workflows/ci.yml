name: Continuous Integration
on:
  push:
  pull_request:
jobs:
  getAffectedLibrariesApps:
    env:
        NX_BRANCH: ${{ github.event.pull_request.head.ref }}
    name: Determine affected libraries and apps
    runs-on: ubuntu-latest
    outputs:
      libs: ${{ steps.get-affected-libs-apps.outputs.libs }}
      apps: ${{ steps.get-affected-libs-apps.outputs.apps }}
      libsApps: ${{ steps.get-affected-libs-apps.outputs.libsApps }}
      run: ${{ steps.get-affected-libs-apps.outputs.run }}
      runApps: ${{ steps.get-affected-libs-apps.outputs.runApps }}
      runLibs: ${{ steps.get-affected-libs-apps.outputs.runLibs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
          if [  ${{github.event.before}} == 0000000000000000000000000000000000000000 ]
          then
            echo NX_BASE=origin/dev >>$GITHUB_ENV
          else
            echo NX_BASE=${{ github.event.before }} >>$GITHUB_ENV
          fi
          fi

      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
        with:
          useRollingCache: true
      
      - name: Install Nrwl CLI
        run: npm install -g @nrwl/cli      

      - id: get-affected-libs-apps
        name: Determine affected libraries and apps
        run: |
          mapfile -d " " -t libsArr < <( nx affected:libs --base=$NX_BASE --plain )
          mapfile -d " " -t appsArr < <( nx affected:apps --base=$NX_BASE --plain )
          libsArr[-1]=$(echo "${libsArr[-1]}" | xargs)
          appsArr[-1]=$(echo "${appsArr[-1]}" | xargs)
          run=true
          runApps=true
          runLubs=true

          if [ -z "${libsArr[0]}" ]; then
            unset libsArr[-1]
            libsJson=[]
            runLibs=false
          else
            libsJson=$(printf '"%s"\n' "${libsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi

          if [ -z "${appsArr[0]}" ]; then
            unset appsArr[-1]
            appsJson=[]
            runApps=false
          else
            appsJson=$(printf '"%s"\n' "${appsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi
          libsAppsArr=( "${libsArr[@]}" "${appsArr[@]}" )
          if [ "${#libsAppsArr[@]}" = "0" ]; then
            libsAppsJson=[]
            run=false
          else
            libsAppsJson=$(printf '"%s"\n' "${libsAppsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi

          echo "::set-output name=libs::$libsJson"
          echo "::set-output name=apps::$appsJson"
          echo "::set-output name=libsApps::$libsAppsJson"
          echo "::set-output name=run::$run"
          echo "::set-output name=runApps::$runApps"
          echo "::set-output name=runLibs::$runLibs"

  lint:
    env:
        NX_BRANCH: ${{ github.event.pull_request.head.ref }}
    name: Lint libraries and apps
    runs-on: ubuntu-latest
    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/dev >>$GITHUB_ENV
          fi

      # TypeScript
      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
        with:
          useRollingCache: true
      
      - name: Install Nrwl CLI
        run: npm install -g @nrwl/cli      

      # Python
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: "x64"

      - name: Install Flake8
        run: |
          python -m pip install flake8

      - name: Lint
        run: nx affected:lint


  build:
    env:
        NX_BRANCH: ${{ github.event.pull_request.head.ref }}
        NODE_OPTIONS: --max_old_space_size=6144
    name: Build app
    runs-on: ubuntu-latest

    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.apps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/dev >>$GITHUB_ENV
          fi

      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
        with:
          useRollingCache: true
      
      - name: Install Nrwl CLI
        run: npm install -g @nrwl/cli      
      # Python
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - if: matrix.app == 'combine-service'
        name: Build Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: ${{ env.BRANCH_NAME }}
          push_image_and_stages: ${{github.event_name == 'pull_request'}}
          registry: ghcr.io
          context: .
          dockerfile: DockerfilePython
          build_extra_args: "--build-arg app=${{matrix.app}} --label org.opencontainers.image.revision=${{github.sha}} --label org.opencontainers.image.created=${{steps.get-timestamp.outputs.timestamp}}"

      - name: Build app and dependencies
        run: nx run ${{ matrix.app }}:build --prod --with-deps

  testApp:
    env:
        NX_BRANCH: ${{ github.event.pull_request.head.ref }}
        NODE_OPTIONS: --max_old_space_size=6144
    name: Test app
    runs-on: ubuntu-latest

    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.runApps == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        libOrApp: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.apps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/dev >>$GITHUB_ENV
          fi

      ############################
      ## TypeScript apps
      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
        with:
          useRollingCache: true
      
      - name: Install Nrwl CLI
        run: npm install -g @nrwl/cli      

      - name: Test app (TypeScript)
        if: matrix.libOrApp != 'combine-service'
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_ISSUER: ${{ secrets.AUTH0_ISSUER }}
          API_AUDIENCE: ${{ secrets.API_AUDIENCE }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          MANAGEMENT_DOMAIN: ${{ secrets.MANAGEMENT_DOMAIN }}
          MANAGEMENT_ID: ${{ secrets.MANAGEMENT_ID }}
          MANAGEMENT_SECRET: ${{ secrets.MANAGEMENT_SECRET }}
          NODE_OPTIONS: --max_old_space_size=6144
        run: nx run ${{ matrix.libOrApp }}:build --prod --with-deps && nx run ${{ matrix.libOrApp }}:test --coverage

      ############################
      ## Python apps
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - if: matrix.libOrApp == 'combine-service'
        name: Build Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.libOrApp}}
          image_tag: ${{ env.BRANCH_NAME }}
          push_image_and_stages: ${{github.event_name == 'pull_request'}}
          registry: ghcr.io
          context: .
          dockerfile: DockerfilePython
          build_extra_args: "--build-arg app=${{matrix.libOrApp}} --label org.opencontainers.image.revision=${{github.sha}} --label org.opencontainers.image.created=${{steps.get-timestamp.outputs.timestamp}}"

      - name: Install dev dependencies and execute tests (Python)
        if: matrix.libOrApp == 'combine-service'
        run: |
          cwd=$(pwd)
          docker run \
            --rm \
            --entrypoint bash \
            --mount type=bind,source=${cwd}/apps/${{ matrix.libOrApp }},target=/app/apps/${{ matrix.libOrApp }} \
            ghcr.io/biosimulations/${{matrix.libOrApp}}:${{ env.BRANCH_NAME }} \
            -c "
              pipenv install --dev
              mv src src-ignore
              export PYTHONPATH=apps/${{ matrix.libOrApp }}
              /bin/bash /xvfb-startup.sh pipenv run python -m pytest --verbose --cov apps/${{ matrix.libOrApp }}/src/ --cov-report=xml apps/${{ matrix.libOrApp }}/tests/
            "

      - name: Validate OpenAPI specification for library or app (Python)
        if: matrix.libOrApp == 'combine-service'
        run: |
          # ./node_modules/.bin/openapi-examples-validator apps/${{ matrix.libOrApp }}/src/spec/spec.yml

      ############################
      ## Upload coverage data
      - name: Upload coverage data to Codecov
        uses: codecov/codecov-action@v2.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  testLib:
    env:
        NX_BRANCH: ${{ github.event.pull_request.head.ref }}
        NODE_OPTIONS: --max_old_space_size=6144
    name: Test library or app
    runs-on: ubuntu-latest

    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.runLib == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        libOrApp: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.libs) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/deploy >>$GITHUB_ENV
          fi

      # TypeScript libraries
      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install npm dependencies
        uses: bahmutov/npm-install@v1
        with:
          useRollingCache: true
      
      - name: Install Nrwl CLI
        run: npm install -g @nrwl/cli      

      - name: Test library (TypeScript)
        if: matrix.libOrApp != 'combine-service'
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_ISSUER: ${{ secrets.AUTH0_ISSUER }}
          API_AUDIENCE: ${{ secrets.API_AUDIENCE }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          MANAGEMENT_DOMAIN: ${{ secrets.MANAGEMENT_DOMAIN }}
          MANAGEMENT_ID: ${{ secrets.MANAGEMENT_ID }}
          MANAGEMENT_SECRET: ${{ secrets.MANAGEMENT_SECRET }}
        run: nx run ${{ matrix.libOrApp }}:test --coverage

      # Python libraries
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - if: matrix.libOrApp == 'combine-service'
        name: Build Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.libOrApp}}
          image_tag: ${{ env.BRANCH_NAME }}
          push_image_and_stages: ${{github.event_name == 'pull_request'}}
          registry: ghcr.io
          context: .
          dockerfile: DockerfilePython
          build_extra_args: "--build-arg app=${{matrix.libOrApp}} --label org.opencontainers.image.revision=${{github.sha}} --label org.opencontainers.image.created=${{steps.get-timestamp.outputs.timestamp}}"

      - name: Install dev dependencies and execute tests (Python)
        if: matrix.libOrApp == 'combine-service'
        run: |
          cwd=$(pwd)
          docker run \
            --rm \
            --entrypoint bash \
            --mount type=bind,source=${cwd}/libs/${{ matrix.libOrApp }},target=/app/libs/${{ matrix.libOrApp }} \
            ghcr.io/biosimulations/${{matrix.libOrApp}}:${{ env.BRANCH_NAME }} \
            -c "
              pipenv install --dev
              mv src src-ignore
              export PYTHONPATH=libs/${{ matrix.libOrApp }}
              /bin/bash /xvfb-startup.sh pipenv run python -m pytest --verbose --cov libs/${{ matrix.libOrApp }}/src/ --cov-report=xml libs/${{ matrix.libOrApp }}/tests/
            "

      - name: Validate OpenAPI specification for library or app (Python)
        if: matrix.libOrApp == 'combine-service'
        run: |
          # ./node_modules/.bin/openapi-examples-validator libs/${{ matrix.libOrApp }}/src/spec/spec.yml

      # Upload coverage data
      - name: Upload coverage data to Codecov
        uses: codecov/codecov-action@v2.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  buildPushDockerImages:
    name: Build Docker image for app
    runs-on: ubuntu-latest

    needs: [getAffectedLibrariesApps]
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.apps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - id: get-timestamp
        name: Get a timestamp
        run: |
          TIMESTAMP=$(date --rfc-3339=seconds | sed 's/ /T/')
          echo "::set-output name=timestamp::$TIMESTAMP"

      - if: matrix.app != 'combine-service'
        name: Build Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: ${{ env.BRANCH_NAME }}
          push_image_and_stages: ${{github.event_name == 'pull_request'}}
          registry: ghcr.io
          context: .
          dockerfile: Dockerfile
          build_extra_args: "--build-arg app=${{matrix.app}} --label org.opencontainers.image.revision=${{github.sha}} --label org.opencontainers.image.created=${{steps.get-timestamp.outputs.timestamp}}"

      - if: matrix.app == 'combine-service'
        name: Build Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: ${{ env.BRANCH_NAME }}
          push_image_and_stages: ${{github.event_name == 'pull_request'}}
          registry: ghcr.io
          context: .
          dockerfile: DockerfilePython
          build_extra_args: "--build-arg app=${{matrix.app}} --label org.opencontainers.image.revision=${{github.sha}} --label org.opencontainers.image.created=${{steps.get-timestamp.outputs.timestamp}}"

  markDone:
    name: Mark CI as complete
    needs: [getAffectedLibrariesApps, lint, testApp, testLib, build, buildPushDockerImages]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "CI PASSED"

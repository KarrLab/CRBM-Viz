name: Continuous Integration
on:
  push:
  pull_request:
jobs:
  getAffectedLibrariesApps:
    name: Determine affected libraries and apps
    runs-on: ubuntu-latest
    outputs:
      libs: ${{ steps.get-affected-libs-apps.outputs.libs }}
      apps: ${{ steps.get-affected-libs-apps.outputs.apps }}
      libsApps: ${{ steps.get-affected-libs-apps.outputs.libsApps }}
      run: ${{ steps.get-affected-libs-apps.outputs.run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
          if [  ${{github.event.before}} == 0000000000000000000000000000000000000000 ]
          then
            echo NX_BASE=origin/dev >>$GITHUB_ENV
          else
            echo NX_BASE=${{ github.event.before }} >>$GITHUB_ENV
          fi
          fi

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
          
      - name: Install Pipenv and Flake8
        run: python -m pip install pipenv flake8

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: biosimulations/node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-nx-

      - id: get-affected-libs-apps
        name: Determine affected libraries and apps
        working-directory: ./biosimulations
        run: |
          mapfile -d " " -t libsArr < <( nx affected:libs --base=$NX_BASE --plain )
          mapfile -d " " -t appsArr < <( nx affected:apps --base=$NX_BASE --plain )
          libsArr[-1]=$(echo "${libsArr[-1]}" | xargs)
          appsArr[-1]=$(echo "${appsArr[-1]}" | xargs)
          run=true

          if [ -z "${libsArr[0]}" ]; then
            unset libsArr[-1]
            libsJson=[]
          else
            libsJson=$(printf '"%s"\n' "${libsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi

          if [ -z "${appsArr[0]}" ]; then
            unset appsArr[-1]
            appsJson=[]
          else
            appsJson=$(printf '"%s"\n' "${appsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi
          libsAppsArr=( "${libsArr[@]}" "${appsArr[@]}" )
          if [ "${#libsAppsArr[@]}" = "0" ]; then
            libsAppsJson=[]
            run=false
          else
            libsAppsJson=$(printf '"%s"\n' "${libsAppsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi

          echo "::set-output name=libs::$libsJson"
          echo "::set-output name=apps::$appsJson"
          echo "::set-output name=libsApps::$libsAppsJson"
          echo "::set-output name=run::$run"

  lint:
    name: Lint libraries and apps
    runs-on: ubuntu-latest

    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}

    strategy:
      matrix:
        libOrApp: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.libsApps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/deploy >>$GITHUB_ENV
          fi

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
          
      - name: Install Pipenv and Flake8
        run: python -m pip install pipenv flake8

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"
 
      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: biosimulations/node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.libOrApp }}-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.libOrApp }}
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-nx-
      - name: Lint library or app
        working-directory: ./biosimulations
        run: nx run ${{ matrix.libOrApp }}:lint

  build:
    name: Build app
    runs-on: ubuntu-latest

    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}
    strategy:
      matrix:
        app: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.apps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/deploy >>$GITHUB_ENV
          fi
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
          
      - name: Install Pipenv and Flake8
        run: python -m pip install pipenv flake8
        
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: biosimulations/node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.app }}-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.app }}
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-nx-

      - name: Build app
        working-directory: ./biosimulations
        run: nx run ${{ matrix.app }}:build --prod

  test:
    name: Test library or app
    runs-on: ubuntu-latest

    needs: getAffectedLibrariesApps
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}
    strategy:
      matrix:
        libOrApp: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.libsApps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Configure base commit
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            echo NX_BASE=origin/$GITHUB_BASE_REF >>$GITHUB_ENV
          else
            echo NX_BASE=origin/deploy >>$GITHUB_ENV
          fi
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
          
      - name: Install Pipenv and Flake8
        run: python -m pip install pipenv flake8
        
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Install Python dependencies
        if: 'combine-service' == matrix.libOrApp
        working-directory: ./biosimulations/apps/${{ matrix.libOrApp }}
        run: |
          pipenv sync --dev
          pipenv shell

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: biosimulations/node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.libOrApp }}-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.libOrApp }}
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-nx-

      - name: Test library or app
        working-directory: ./biosimulations
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_ISSUER: ${{ secrets.AUTH0_ISSUER }}
          API_AUDIENCE: ${{ secrets.API_AUDIENCE }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          MANAGEMENT_DOMAIN: ${{ secrets.MANAGEMENT_DOMAIN }}
          MANAGEMENT_ID: ${{ secrets.MANAGEMENT_ID }}
          MANAGEMENT_SECRET: ${{ secrets.MANAGEMENT_SECRET }}

        run: nx run ${{ matrix.libOrApp }}:test --code-coverage --codeCoverage

      - name: Upload coverage data to Codecov
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  buildPushDockerImages:
    name: Build Docker image for app
    runs-on: ubuntu-latest

    needs: [getAffectedLibrariesApps]
    if: ${{ needs.getAffectedLibrariesApps.outputs.run == 'true' }}
    strategy:
      matrix:
        app: ${{ fromJson(needs.getAffectedLibrariesApps.outputs.apps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Build Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: ${{github.sha}}
          push_image_and_stages: false
          registry: ghcr.io
          context: .
          dockerfile: Dockerfile
          build_extra_args: "--compress=true --build-arg app=${{matrix.app}}"

  markDone:
    name: Mark CI as complete
    needs: [getAffectedLibrariesApps, lint, test, build, buildPushDockerImages]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "CI PASSED"

name: Continuous Deployment
on:
  push:
    branches: [dev, debugci]
jobs:
  listApps:
    name: Get a list of all apps
    runs-on: ubuntu-latest
    outputs:
      apps: ${{steps.get-all-apps.outputs.apps}}
      frontendApps: ${{steps.get-all-apps.outputs.frontendApps}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 15.x

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
      - name: Install npm dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-nx-
      - id: get-all-apps
        name: Get the list of apps
        working-directory: ./biosimulations
        run: |
          mapfile -d " " -t appsArr < <(nx affected:apps --plain --all | sed  's/simulators[^-]//; s/account[^-]\|account$//; s/dispatch[^-]//;  s/platform[^-]//' | sed 's/ $//')
           appsArr[-1]=$(echo "${appsArr[-1]}" | xargs)
           if [ -z "${appsArr[0]}" ]; then
             unset appsArr[-1]
             appsJson=[]
           else
             appsJson=$(printf '"%s"\n' "${appsArr[@]}" | jq  . | jq -s . | tr -d '\n')
           fi
           frontendAppsArr=('account' 'platform' 'simulators' 'dispatch')
           frontendAppsJson=$(printf '"%s"\n' "${frontendAppsArr[@]}" | jq  . | jq -s . | tr -d '\n')
           echo "::set-output name=apps::$appsJson"
           echo "::set-output name=frontendApps::$frontendAppsJson"
  buildDevFrontEnds:
    name: Build development front end apps
    runs-on: ubuntu-latest

    needs: [listApps]
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.frontendApps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 15.x

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
      - name: Install npm dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Build dev app
        working-directory: ./biosimulations
        run: mv libs/shared/environments/src/lib/environment.stage.ts libs/shared/environments/src/lib/environment.prod.ts && npm run nx build --prod ${{matrix.app}} && ls && ls dist

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.app}}-dev
          path: biosimulations/dist/apps/${{matrix.app}}
          retention-days: 5
          if-no-files-found: error

  buildProdFrontEnds:
    name: Build production front end apps
    runs-on: ubuntu-latest

    needs: [listApps]
    strategy:
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.frontendApps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 15.x

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: sudo apt-get -y install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
      - name: Install npm dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: biosimulations/node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.app }}-${{github.sha}}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ matrix.app }}
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-nx-
      - name: Build prod app
        working-directory: ./biosimulations
        run: nx build --prod ${{matrix.app}}

      - name: Upload build

        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.app}}-prod
          path: biosimulations/dist/apps/${{matrix.app}}
          retention-days: 5
          if-no-files-found: error

  buildPushDockerImages:
    name: Build and push backend docker images
    runs-on: ubuntu-latest

    needs: [listApps]
    strategy:
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.apps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - if: matrix.app != 'combine-service'
        name: Build and Push Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: latest,${{github.sha}}
          push_git_tag: true
          registry: ghcr.io
          context: .
          dockerfile: Dockerfile
          build_extra_args: "--compress=true --build-arg app=${{matrix.app}}"

      - if: matrix.app == 'combine-service'
        name: Build and Push Python Image Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: latest,${{github.sha}}
          push_git_tag: true
          registry: ghcr.io
          context: .
          dockerfile: DockerfilePython
          build_extra_args: "--compress=true --build-arg app=${{matrix.app}}"
  deployDevFrontend:
    name: Publish the development frontend
    runs-on: ubuntu-latest
    needs: [listApps, buildDevFrontEnds, buildPushDockerImages]
    environment: dev_environment
    strategy:
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.frontendApps) }}
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 15.x

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Download Build for app
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.app}}-dev

      - name: Push App
        env:
          idKey: ${{matrix.app}}_site_id
          NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
        run: |
          export NETLIFY_SITE_ID=${{secrets[env.idKey]}}
          export NETLIFY_AUTH_TOKEN=${{secrets.NETLIFY_AUTH_TOKEN}}
          netlify deploy --prod
  deployProdFrontend:
    name: Publish the production frontend
    runs-on: ubuntu-latest
    needs: [listApps, buildProdFrontEnds, buildPushDockerImages]
    environment: prod_environment
    strategy:
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.frontendApps) }}
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 15.x

      - name: Download Build for app
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.app}}-prod

      - name: Push App
        env:
          idKey: ${{matrix.app}}_site_id
          NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
        run: |
          export NETLIFY_SITE_ID=${{secrets[env.idKey]}}
          export NETLIFY_AUTH_TOKEN=${{secrets.NETLIFY_AUTH_TOKEN}}
          netlify deploy --prod
  triggerDevDeployment:
    name: Trigger a new deployment of the dev backend
    runs-on: ubuntu-latest
    needs: [buildPushDockerImages, buildDevFrontEnds]
    environment: dev_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Call Webhook
        env:
          GHCR_USERNAME: "${{ secrets.GHCR_USERNAME }}"
          GHCR_TOKEN: "${{ secrets.GHCR_TOKEN }}"
          BRANCH: ${{ secrets.OVERLAY }}
        run: |
          echo '{"ref": "master","inputs":{"overlay": "'$BRANCH'","tag":"'$GITHUB_SHA'"}}' >body
          curl -X POST 'https://api.github.com/repos/biosimulations/Biosimulations-Deployment/actions/workflows/deploy.yml/dispatches' -H 'Authorization: Bearer ${{ secrets.GHCR_TOKEN }}' -H 'Content-Type: application/json' --data "@body"
  triggerProdDeployment:
    name: Trigger a new deployment of the production backend
    runs-on: ubuntu-latest
    needs: [buildPushDockerImages, buildProdFrontEnds]
    environment: prod_environment
    steps:
      - name: Call Webhook
        env:
          GHCR_USERNAME: "${{ secrets.GHCR_USERNAME }}"
          GHCR_TOKEN: "${{ secrets.GHCR_TOKEN }}"
          BRANCH: ${{ secrets.NAME }}

        run: |
          echo '{"ref": "master","inputs":{"overlay": "'$BRANCH'","tag":"'$GITHUB_SHA'"}}' >body
          curl -X POST 'https://api.github.com/repos/biosimulations/Biosimulations-Deployment/actions/workflows/deploy.yml/dispatches' -H 'Authorization: Bearer ${{ secrets.GHCR_TOKEN }}' -H 'Content-Type: application/json' --data "@body"

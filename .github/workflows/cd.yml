name: Build, push, and deploy the docker images
on: 
  push:
    branches: [deploy, dev]
jobs:
  listApps:
    name: Get a list of all apps
    runs-on: ubuntu-latest
    outputs:
      apps: ${{steps.get-all-apps.outputs.apps}}
      frontendApps:  ${{steps.get-all-apps.outputs.frontendApps}}
    steps: 

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with: 
          node-version: 15.x

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}

      - id: get-all-apps
        name: Get the list of apps
        working-directory: ./biosimulations
        run: |
         mapfile -d " " -t appsArr < <(nx affected:apps --plain --all | sed  's/simulators[^-]//; s/account[^-]\|account$//; s/dispatch[^-]//;  s/platform[^-]//' | sed 's/ $//')
          appsArr[-1]=$(echo "${appsArr[-1]}" | xargs)

          if [ -z "${appsArr[0]}" ]; then
            unset appsArr[-1]
            appsJson=[]
          else
            appsJson=$(printf '"%s"\n' "${appsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          fi
          frontendAppsArr=('account' 'platform' 'simulators' 'dispatch')
          fronendAppsJson=$(printf '"%s"\n' "${appsArr[@]}" | jq  . | jq -s . | tr -d '\n')
          echo "::set-output name=apps::$appsJson"
          echo "::set-output name=frontendApps::$frontendAppsJson"
          
  buildFrontEnds:
    name: Build front end apps
    runs-on: ubuntu-latest

    needs: [listApps]
    strategy:
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.frontendApps) }}

    steps:
  
      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: Install Node.js
        uses: actions/setup-node@v1
        with: 
          node-version: 15.x

      - name: Install Nrwl CLI
        working-directory: ./biosimulations
        run: npm install -g @nrwl/cli

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        working-directory: ./biosimulations
        run: npm ci

      - name: Cache Angular and NX dependencies
        uses: actions/cache@v2
        with:
          path: node_modules/.cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
      
     
      - name: Build dev app
        run: mv libs/shared/environments/src/lib/environment.stage.ts libs/shared/environments/src/lib/environment.prod.ts && nx build --prod ${{matrix.app}}
        
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.app}}-dev
          path: dist/apps/${{matrix.app}}
          retention-days: 5
      
      - name: Build prod app
        run: nx build --prod ${{matrix.app}}
                
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.app}}-prod
          path: dist/apps/${{matrix.app}}
          retention-days: 5

  buildPushDockerImages:
    name: Build, push, and deploy Docker image for app
    runs-on: ubuntu-latest

    needs: [listApps]
    strategy:
      matrix:
        app: ${{ fromJson(needs.listApps.outputs.apps) }}

    steps:
  
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Extract branch name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo ${GITHUB_REF#refs/heads/}
        id: extract_branch
        
      - name: Build and Push Image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.GHCR_USERNAME }}"
          password: "${{ secrets.GHCR_TOKEN }}"
          image_name: biosimulations/${{matrix.app}}
          image_tag: ${{ steps.extract_branch.outputs.branch }},${{github.sha}}
          push_git_tag: true
          registry: ghcr.io
          context: .
          dockerfile: Dockerfile
          build_extra_args: "--compress=true --build-arg app=${{matrix.app}}"          
  
  triggerDevDeployment:
    name: Trigger a new deployment of the latest images
    runs-on: ubuntu-latest
    needs: [buildPushDockerImages]
    environment: dev_environment
    steps: 
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo ${GITHUB_REF#refs/heads/}
        id: extract_branch
     
      - name: Call Webhook
        env:
            GHCR_USERNAME: "${{ secrets.GHCR_USERNAME }}"
            GHCR_TOKEN: "${{ secrets.GHCR_TOKEN }}"
            BRANCH: ${{ secrets.NAME }}
        
        run: |
          echo '{"ref": "master","inputs":{"overlay": "'$BRANCH'","tag":"'$GITHUB_SHA'"}}' >body
          curl -X POST 'https://api.github.com/repos/biosimulations/Biosimulations-Deployment/actions/workflows/deploy.yml/dispatches' -H 'Authorization: Bearer ${{ secrets.GHCR_TOKEN }}' -H 'Content-Type: application/json' --data "@body"
         
  triggerProdDeployment:
    name: Trigger a new deployment of the production environment
    runs-on: ubuntu-latest
    needs: [buildPushDockerImages]
    environment: prod_environment
    steps: 
      - name: Checkout Repository
        uses: actions/checkout@v2
     
      - name: Call Webhook
        env:
            GHCR_USERNAME: "${{ secrets.GHCR_USERNAME }}"
            GHCR_TOKEN: "${{ secrets.GHCR_TOKEN }}"
            BRANCH: ${{ secrets.NAME }}
        
        run: |
          echo '{"ref": "master","inputs":{"overlay": "'$BRANCH'","tag":"'$GITHUB_SHA'"}}' >body
          curl -X POST 'https://api.github.com/repos/biosimulations/Biosimulations-Deployment/actions/workflows/deploy.yml/dispatches' -H 'Authorization: Bearer ${{ secrets.GHCR_TOKEN }}' -H 'Content-Type: application/json' --data


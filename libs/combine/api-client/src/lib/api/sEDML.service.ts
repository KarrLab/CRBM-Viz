/**
 * BioSimulations COMBINE service
 * Endpoints for working with COMBINE/OMEX archives and model (e.g., SBML) and simulation (e.g., SED-ML) files that they typically contain.  Note, this API may change significantly in the future.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@biosimulations.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { SedDocument } from '../model/sedDocument';
import { Configuration } from '../configuration';

@Injectable()
export class SEDMLService {
  protected basePath = 'http://combine.api.biosimulations.dev';
  public defaultHeaders = new Map();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpService,
    @Optional() configuration: Configuration,
  ) {
    this.configuration = configuration || this.configuration;
    this.basePath = configuration?.basePath || this.basePath;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    return consumes.includes(form);
  }

  /**
   * Get the possible observables of a simulation as a list of SED variables.
   *
   * @param modelLanguage A SED URN for a model language.  The full list of recognized values is available at http://sed-ml.org/urns.html.
   * @param simulationType Type of simulation.
   * @param modelingFramework Identifier for an SBO term
   * @param simulationAlgorithm KiSAO id
   * @param modelFile The two files uploaded in creating a combine archive
   * @param modelUrl URL
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public srcHandlersSedMlGetParametersVariablesForSimulationHandler(
    modelLanguage: string,
    simulationType: string,
    modelingFramework: string,
    simulationAlgorithm: string,
    modelFile?: Blob,
    modelUrl?: string,
  ): Observable<AxiosResponse<SedDocument>>;
  public srcHandlersSedMlGetParametersVariablesForSimulationHandler(
    modelLanguage: string,
    simulationType: string,
    modelingFramework: string,
    simulationAlgorithm: string,
    modelFile?: Blob,
    modelUrl?: string,
  ): Observable<any> {
    if (modelLanguage === null || modelLanguage === undefined) {
      throw new Error(
        'Required parameter modelLanguage was null or undefined when calling srcHandlersSedMlGetParametersVariablesForSimulationHandler.',
      );
    }

    if (simulationType === null || simulationType === undefined) {
      throw new Error(
        'Required parameter simulationType was null or undefined when calling srcHandlersSedMlGetParametersVariablesForSimulationHandler.',
      );
    }

    if (modelingFramework === null || modelingFramework === undefined) {
      throw new Error(
        'Required parameter modelingFramework was null or undefined when calling srcHandlersSedMlGetParametersVariablesForSimulationHandler.',
      );
    }

    if (simulationAlgorithm === null || simulationAlgorithm === undefined) {
      throw new Error(
        'Required parameter simulationAlgorithm was null or undefined when calling srcHandlersSedMlGetParametersVariablesForSimulationHandler.',
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: {
      append(param: string, value: any): void;
    } = new FormData();
    let useForm = false;
    let convertFormParamsToString = false;

    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      // formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    }

    if (modelFile !== undefined) {
      formParams.append('modelFile', <any>modelFile);
    }

    if (modelLanguage !== undefined) {
      formParams.append('modelLanguage', <any>modelLanguage);
    }

    if (simulationType !== undefined) {
      formParams.append('simulationType', <any>simulationType);
    }

    if (modelingFramework !== undefined) {
      formParams.append('modelingFramework', <any>modelingFramework);
    }

    if (simulationAlgorithm !== undefined) {
      formParams.append('simulationAlgorithm', <any>simulationAlgorithm);
    }

    if (modelUrl !== undefined) {
      formParams.append('modelUrl', <any>modelUrl);
    }

    return this.httpClient.post<SedDocument>(
      `${this.basePath}/sed-ml/get-parameters-variables-for-simulation`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      },
    );
  }
}

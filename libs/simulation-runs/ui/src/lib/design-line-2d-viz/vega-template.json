{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 600,
  "height": 400,
  "padding": 0,
  "signals": [
    {
      "name": "xScaleType",
      "value": "log"
    },
    {
      "name": "yScaleType",
      "value": "log"
    },
    {
      "name": "style",
      "value": "lines"
    },
    {
      "name": "singleXAxis",
      "value": true
    },
    {
      "name": "singleYAxis",
      "value": false
    },
    {
      "name": "xAxisTitle",
      "value": "Time (min)"
    },
    {
      "name": "yAxisTitle",
      "value": "Multiple"
    },
    {
      "name": "xTickCount",
      "value": 5
    },
    {
      "name": "yTickCount",
      "value": 5
    },
    {
      "name": "lineWidth",
      "value": 2
    },
    {
      "name": "symbolSize",
      "value": 20
    },
    {
      "name": "axesPadding",
      "value": 5
    },
    {
      "name": "axesWidth",
      "value": 55
    },
    {
      "name": "axesHeight",
      "value": 50
    },
    {
      "name": "legendYOffset",
      "value": 5
    },
    {
      "name": "chartWidth",
      "update": "width - axesWidth - axesPadding"
    },
    {
      "name": "chartHeight",
      "update": "height - axesHeight -axesPadding"
    },
    {
      "name": "clear",
      "value": true,
      "on": [
        {
          "events": "mouseup[!event.item]",
          "update": "true",
          "force": true
        }
      ]
    },
    {
      "name": "shift",
      "value": false,
      "on": [
        {
          "events": "@legendSymbol:click, @legendLabel:click",
          "update": "event.shiftKey",
          "force": true
        }
      ]
    },
    {
      "name": "clicked",
      "value": null,
      "on": [
        {
          "events": "@legendSymbol:click, @legendLabel:click",
          "update": "{value: datum.value}",
          "force": true
        }
      ]
    }
  ],
  "data": [
    {
      "name": "rawData0",
      "sedmlUri": ["location/of/simulation.sedml", "idOfReport"]
    },
    {
      "name": "rawData0_filtered",
      "source": "rawData0",
      "transform": [
        {
          "type": "filter",
          "expr": "indexof(['data_set_1_id', 'data_set_2_id'], datum.id) !== -1"
        },
        {
          "type": "formula",
          "expr": "'sed-doc-location/report-id'",
          "as": "reportUri"
        }
      ]
    },
    {
      "name": "rawData0_flattened",
      "source": ["rawData0_filtered"],
      "transform": [
        {
          "type": "flatten",
          "fields": ["values"],
          "index": "iteration"
        },
        {
          "type": "flatten",
          "fields": ["values"],
          "index": "subtask"
        },
        {
          "type": "formula",
          "expr": "[toString(datum.iteration + 1), toString(datum.subtask + 1)]",
          "as": "iterationSubTaskIndices"
        },
        {
          "type": "formula",
          "expr": "datum.iterationSubTaskIndices.length ? ' '  + join(datum.iterationSubTaskIndices, '-') : ''",
          "as": "iterationSubTaskLabel"
        }
      ]
    },
    {
      "name": "rawData_joined",
      "source": ["rawData0_flattened"],
      "transform": [
        {
          "type": "cross",
          "as": ["X", "Y"],
          "filter": "((datum.X.reportUri === 'simulation_1.sedml/report' && datum.X.id == 'data_set_time' && datum.Y.reportUri === 'simulation_1.sedml/report' && datum.Y.id == 'data_set_Sic') || (datum.X.reportUri === 'simulation_1.sedml/report' && datum.X.id == 'data_set_time' && datum.Y.reportUri === 'simulation_1.sedml/report' && datum.Y.id == 'data_set_Cdc20a') && datum.X.iterationSubTaskLabel == datum.Y.iterationSubTaskLabel"
        }
      ]
    },
    {
      "name": "xyData",
      "source": "rawData_joined",
      "transform": [
        {
          "type": "formula",
          "expr": "datum.X.values",
          "as": "x"
        },
        {
          "type": "formula",
          "expr": "datum.Y.id",
          "as": "SpeciesId"
        },
        {
          "type": "formula",
          "expr": "singleXAxis ? datum.Y.fullLabel : singleYAxis ? datum.X.fullLabel : datum.X.label + ' vs. ' + datum.Y.fullLabel",
          "as": "label"
        },
        {
          "type": "formula",
          "expr": "datum.Y.values",
          "as": "y"
        },
        {
          "type": "flatten",
          "fields": ["x", "y"]
        },
        {
          "type": "collect",
          "sort": {
            "field": "label"
          }
        },
        {
          "type": "filter",
          "expr": "xScaleType === 'log' ? datum.x != 0 : true"
        },
        {
          "type": "filter",
          "expr": "yScaleType === 'log' ? datum.y != 0 : true"
        }
      ]
    },
    {
      "name": "selected",
      "on": [
        {
          "trigger": "clear",
          "remove": true
        },
        {
          "trigger": "!shift",
          "remove": true
        },
        {
          "trigger": "!shift && clicked",
          "insert": "clicked"
        },
        {
          "trigger": "shift && clicked",
          "toggle": "clicked"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "xScale",
      "type": "linear",
      "range": [
        0,
        {
          "signal": "chartWidth"
        }
      ],
      "domain": {
        "data": "xyData",
        "field": "x"
      }
    },
    {
      "name": "yScale",
      "type": "linear",
      "range": [
        {
          "signal": "axesPadding"
        },
        {
          "signal": "chartHeight + axesPadding"
        }
      ],
      "domain": {
        "data": "xyData",
        "field": "y"
      },
      "reverse": true
    },
    {
      "name": "colorScale",
      "type": "ordinal",
      "range": "category",
      "domain": {
        "data": "xyData",
        "field": "label"
      }
    }
  ],
  "axes": [
    {
      "orient": "bottom",
      "offset": {
        "signal": "axesPadding - axesHeight"
      },
      "scale": "xScale",
      "title": {
        "signal": "xAxisTitle"
      },
      "tickCount": {
        "signal": "xTickCount"
      }
    },
    {
      "orient": "left",
      "offset": {
        "signal": "axesPadding"
      },
      "scale": "yScale",
      "title": {
        "signal": "yAxisTitle"
      },
      "tickCount": {
        "signal": "yTickCount"
      }
    }
  ],
  "marks": [
    {
      "type": "group",
      "from": {
        "facet": {
          "name": "series",
          "data": "xyData",
          "groupby": "label"
        }
      },
      "marks": [
        {
          "type": "symbol",
          "from": {
            "data": "series"
          },
          "encode": {
            "enter": {
              "x": {
                "scale": "xScale",
                "field": "x"
              },
              "y": {
                "scale": "yScale",
                "field": "y"
              },
              "fill": {
                "scale": "colorScale",
                "field": "label"
              },
              "tooltip": {
                "field": "label"
              }
            },
            "update": {
              "size": {
                "signal": "style == 'markers' ? symbolSize : 0"
              },
              "strokeOpacity": [
                {
                  "test": "(!length(data('selected')) || indata('selected', 'value', datum.label))",
                  "value": 1
                },
                {
                  "value": 0.15
                }
              ]
            },
            "hover": {
              "strokeOpacity": {
                "value": 0.5
              }
            }
          }
        },
        {
          "type": "line",
          "from": {
            "data": "series"
          },
          "encode": {
            "enter": {
              "x": {
                "scale": "xScale",
                "field": "x"
              },
              "y": {
                "scale": "yScale",
                "field": "y"
              },
              "stroke": {
                "scale": "colorScale",
                "field": "label"
              },
              "tooltip": {
                "field": "label"
              }
            },
            "update": {
              "strokeWidth": {
                "signal": "style === 'lines' ? lineWidth : 0"
              },
              "strokeOpacity": [
                {
                  "test": "(!length(data('selected')) || indata('selected', 'value', datum.label))",
                  "value": 1
                },
                {
                  "value": 0.15
                }
              ]
            },
            "hover": {
              "strokeOpacity": {
                "value": 0.5
              }
            }
          }
        }
      ]
    }
  ],
  "legends": [
    {
      "stroke": "colorScale",
      "orient": "none",
      "legendX": {
        "signal": "0"
      },
      "legendY": {
        "signal": "legendYOffset"
      },
      "encode": {
        "symbols": {
          "name": "legendSymbol",
          "interactive": true,
          "update": {
            "fill": {
              "value": "transparent"
            },
            "strokeWidth": {
              "value": 2
            },
            "opacity": [
              {
                "test": "length(data('rawData_joined')) <= 1",
                "value": 0
              },
              {
                "test": "!length(data('selected')) || indata('selected', 'value', datum.value)",
                "value": 0.7
              },
              {
                "value": 0.15
              }
            ],
            "size": {
              "value": 64
            }
          }
        },
        "labels": {
          "name": "legendLabel",
          "interactive": true,
          "update": {
            "opacity": [
              {
                "test": "length(data('rawData_joined')) <= 1",
                "value": 0
              },
              {
                "test": "!length(data('selected')) || indata('selected', 'value', datum.value)",
                "value": 1
              },
              {
                "value": 0.25
              }
            ]
          }
        }
      }
    }
  ]
}

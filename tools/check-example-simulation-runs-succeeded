#!/usr/bin/env python3

import argparse
import json
import os
import requests

EXAMPLE_SIMULATIONS_RUNS_FILENAME = os.path.join(os.path.dirname(__file__),
                                                 '..', 'apps', 'dispatch', 'src', 'app', 'components',
                                                 'simulations', 'browse', 'example-simulations.{}.json')


def get_simulation_runs_endpoint(runbiosimulations_api):
    """ Get the endpoint for checkin gthe status of each simulation run

    Args:
        runbiosimulations_api (:obj:`str`): API to use to check the status of each run
            (``dev``, ``org``, or ``local``)

    Returns:
        :obj:`str`: endpoint for checkin gthe status of each simulation run
    """
    if runbiosimulations_api == 'local':
        return 'http://localhost:3333/runs'

    return 'https://api.biosimulations.{}/runs'.format(runbiosimulations_api)


def get_failed_runs(examples_api, runbiosimulations_api):
    """ Get a list of any example simulation runs that didn't succeed

    Args:
        examples_api (:obj:`str`): example set to test (``dev`` or ``org``)
        runbiosimulations_api (:obj:`str`): API to use to check the status of each run
            (``dev``, ``org``, or ``local``)

    Returns:
        :obj:`list` of :obj:`str`: ids and names of failed simulation runs
    """

    # get name of file with runs
    filename = EXAMPLE_SIMULATIONS_RUNS_FILENAME.format(examples_api)

    # read simulation runs
    with open(filename, 'r') as file:
        runs = json.load(file)

    # check the status of each run
    endpoint = get_simulation_runs_endpoint(runbiosimulations_api)
    failures = []
    for run in runs:
        response = requests.get(endpoint + '/' + run['id'])
        response.raise_for_status()
        status = response.json()['status']
        if status != 'SUCCEEDED':
            failures.append('{}: {}: {}: {}'.format(examples_api, run['id'], status, run['name']))

    # return list of failed runs
    return failures


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Check that all of the example simulation runs succeeded.'
    )
    args = parser.parse_args()

    failures = sorted(
        get_failed_runs('dev', 'dev')
        + get_failed_runs('org', 'org')
    )
    if failures:
        msg = 'The following example simulation runs did not succeed:\n  {}'.format('\n  '.join(failures))
        raise SystemExit(msg)
    else:
        print('All example simulation runs succeeded!')
